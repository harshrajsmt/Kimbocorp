{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './homeAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // This will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const getDataAsync = createAsyncThunk('FrontPage/fetchData', async data => {\n  const response = await fetchData(data); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const FrontPageSlice = createSlice({\n  name: 'FrontPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    getData: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value = payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(getDataAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(getDataAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  getData\n} = FrontPageSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. \n\nexport const selectData = state => state.FrontPage.value;\nexport default FrontPageSlice.reducer;","map":{"version":3,"sources":["/home/tarun/Downloads/Kimbocorpone/src/pages/FrontPage/FrontPageSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","initialState","value","status","getDataAsync","data","response","FrontPageSlice","name","reducers","getData","state","payload","extraReducers","builder","addCase","pending","fulfilled","action","actions","selectData","FrontPage","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGN,gBAAgB,CAC1C,qBAD0C,EAE1C,MAAOO,IAAP,IAAgB;AACd,QAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACK,IAAD,CAAhC,CADc,CAEd;;AACA,SAAOC,QAAQ,CAACD,IAAhB;AACD,CANyC,CAArC;AASP,OAAO,MAAME,cAAc,GAAGR,WAAW,CAAC;AACxCS,EAAAA,IAAI,EAAE,WADkC;AAExCP,EAAAA,YAFwC;AAGxC;AACAQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,WAAqB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AAC5B;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACT,KAAN,GAAcU,OAAd;AACD;AAPO,GAJ8B;AAaxC;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWX,YAAY,CAACY,OADxB,EACkCL,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACR,MAAN,GAAe,SAAf;AACD,KAHH,EAIGY,OAJH,CAIWX,YAAY,CAACa,SAJxB,EAImC,CAACN,KAAD,EAAQO,MAAR,KAAmB;AAClDP,MAAAA,KAAK,CAACR,MAAN,GAAe,MAAf;AACAQ,MAAAA,KAAK,CAACT,KAAN,IAAegB,MAAM,CAACN,OAAtB;AACD,KAPH;AAQD;AAxBuC,CAAD,CAAlC;AA2BP,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAcH,cAAc,CAACY,OAAnC,C,CAEP;AACA;;AACA,OAAO,MAAMC,UAAU,GAAIT,KAAD,IAAWA,KAAK,CAACU,SAAN,CAAgBnB,KAA9C;AAIP,eAAeK,cAAc,CAACe,OAA9B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './homeAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// This will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const getDataAsync = createAsyncThunk(\n  'FrontPage/fetchData',\n  async (data) => {\n    const response = await fetchData(data);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const FrontPageSlice = createSlice({\n  name: 'FrontPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    getData: (state,{payload}) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value = payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getDataAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getDataAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { getData } = FrontPageSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. \nexport const selectData = (state) => state.FrontPage.value;\n\n\n\nexport default FrontPageSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}